import { validate } from '@mintlify/openapi-parser';
import axios from 'axios';
import yaml from 'js-yaml';
export const getOpenApiFilesFromMintConfig = async (mintConfig) => {
    const openApiFiles = [];
    // Download OpenApi file if url is provided
    if (mintConfig.openapi &&
        typeof mintConfig.openapi === 'string' &&
        mintConfig.openapi.startsWith('https')) {
        const specFromUrl = await getOpenApiDocumentFromUrl(mintConfig.openapi);
        openApiFiles.push({
            filename: 'openapi-from-url',
            spec: specFromUrl,
        });
    }
    return openApiFiles;
};
export const getOpenApiDocumentFromUrl = async (url) => {
    const { data } = await axios.get(url, {
        responseType: 'text',
        transformResponse: (res) => {
            // Disable automatic JSON parsing
            return res;
        },
    });
    let openApiDocument;
    if (url.endsWith('yaml') || url.endsWith('yml')) {
        openApiDocument = yaml.load(data);
    }
    else {
        openApiDocument = JSON.parse(data);
    }
    if (openApiDocument == undefined) {
        throw Error('Could not parse OpenAPI document.');
    }
    // Before uploading, just check to see if spec is valid - don't dereference.
    const { errors, schema, valid, version } = await validate(structuredClone(openApiDocument));
    if (!valid) {
        const errorMessages = errors ? errors.map((error) => `\n${error.code}: ${error.message}`) : '';
        throw new Error(`Failed to validate OpenAPI schema:${errorMessages}`);
    }
    if (!schema)
        throw new Error('Schema failed to validate. Please try again.');
    if (!version || version === '2.0')
        throw new Error('OpenAPI versions prior to 3.0 not supported');
    return openApiDocument;
};
