var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { validate } from '@mintlify/openapi-parser';
import { truncateCircularReferences } from './truncateCircularReferences.js';
function openApiCheck(pathOrObj_1) {
    return __awaiter(this, arguments, void 0, function* (pathOrObj, truncate = false) {
        try {
            const { errors, schema, valid, version } = yield validate(pathOrObj);
            if (!valid) {
                const errorMessages = errors
                    ? errors.map((error) => `\n${error.code}: ${error.message}`)
                    : '';
                throw new Error(`Failed to validate OpenAPI schema:${errorMessages}`);
            }
            if (!schema)
                throw new Error('Schema failed to validate. Please try again.');
            if (!version || version === '2.0')
                throw new Error('OpenAPI versions prior to 3.0 not supported');
            // truncation can be costly, so only do it when necessary
            return truncate ? truncateCircularReferences(schema, 2) : schema;
        }
        catch (_a) {
            return undefined;
        }
    });
}
export { openApiCheck };
